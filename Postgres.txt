############################################## CTID and MVCC ############################################## 
CTID is like rowid;
(79920,37)
first digit (0) represents the page number, and the second (1) stands for the tuple number

* Updating a records will create new CTID; so its unique.
* Its used in MVCC since old values is still having CTID and is avalaiable, but not visible.
** BUT : The VACUUM FULL <TABLE_NAME> rewrites the tables, and the ctid is reset.
** The VACUUM ANALYZE <TABLE_NAME> will free up the unused CTID and will those will be assigned to new records.
https://www.enterprisedb.com/postgres-tutorials/what-equivalent-rowid-postgresql#:~:text=The%20ctid%20field%20is%20a,the%20location%20of%20the%20tuple.


### DATABASE Backup
pg_dump database_name > filename.sql

####### ADVANTAGES
1. MVCC  - used to prevent unnecessary database locking
2. Write-Ahead Logging : enhances database reliability by logging changes before any changes or updates are made to the database
3. full-text search; 
		to_tsvector():  break down a document or column values into individual words(tokens)
		to_tsquery(): 	


--SQL Injection Attack
SELECT id FROM users WHERE username='user' AND password='pass' OR 5=5';'

--SELECT with offset and fetch
select * from stg_tech_schedule_esm order by serial_number
offset 3 rows
fetch first 5 row only;

--Escape character
We can override the default escape character in PostgreSQL by providing the ESCAPE modifier as follows:
SELECT *
FROM employees
WHERE last_name LIKE 'G!%' ESCAPE '!';

--DATATYPES
NUMERIC(m,d)						Where m is the total digits and d is the number of digits after the decimal.
BOOLEAN								true/false, yes/no, 1/0, t/f, y/n
CHARACTER(10)/CHAR(10)				fixed length, blank padded.
CHARACTER VARYING(10)/VARCHAR(10)	variable length with length limit.
TEXT/VARCHAR						varaible unlimited length.

SMALLINT							2 byte
INTEGER/INT							4 byte 
BIGINT								8 byte

NUMERIC/DECIMAL	(x,y)				variable size 131K.16K
REAL								4 byte with 6 decimal precision
DOUBLE PRECISION					8 byte with 15 decimal precision

DATE								4 byte, date only (DD-MON-YYYY)
TIME WITH TIME ZONE					8 byte, time only (HH:MM:SS.pppppp)
TIME WITHOUT TIME ZONE				12 byte, time and time zone (HH:MM:SS.pppppp)
TIMESTAMP							8 byte, date and time 
TIMESTAMPTZ 						8 byte, date, time and timezone

UUID								32 digit unique value. create extension if not exists "uuid-ossp"; product_id UUID Default UUID_GENERATE_V1(),
ARRAY 								ARRAY['ABC','XYZ'], starts with 1.

--INDEX 
CREATE [UNIQUE] INDEX [CONCURRENTLY] index_name
  [ USING BTREE | HASH | GIST | SPGIST | GIN ]
  ON table_name
    (index_col1 [ASC | DESC], 
     index_col2 [ASC | DESC]);
B Tree
Hash index 
Gist:  Generalised Search Tree 
SP GIST:   Space partitioned GIST 
GIN Generalized Inverted Index 
BRIN Block Range Index


--###### ALTER TABLE
--Add Column
ALTER TABLE table_name
  ADD new_column_name column_definition,
  ADD new_column_name column_definition);

--Alter Column Type
ALTER TABLE table_name
  ALTER COLUMN column_name TYPE column_definition,
  ALTER COLUMN column_name TYPE column_definition);

--Alter Column Name
ALTER TABLE table_name
  RENAME COLUMN old_name TO new_name;

--Drop Column  
ALTER TABLE table_name
  DROP COLUMN column_name;
  
  
	 
	 
pg_stat_activity
pg_user
pg_settings
pg_class
pg_hint_plan

--VACUUM 
VACUUM statement is used to reclaim storage by removing obsolete data or tuples

VACUUM [FULL] [FREEZE] [VERBOSE] [table_name ]; 
VACUUM [FULL] [FREEZE] [VERBOSE] ANALYZE table_name [ (col1, col2, ... col_n) ]; (Gather Stats)

FULL : full contents of the table into a new file

Each time you perform an update on a table, the original record is kept in the database. A vacuum will remove these old records (ie: tuples) and reduce the size of the PostgreSQL database.
You can only those vacuum tables in which you have VACUUM permissions.
You can not run a VACUUM command within a transaction.

VACUUM table_name; free up the space within the table and leave the space available to be used by only the table.
VACUUM FULL table_name; This would not only free up the unused space in the table, 
						but it would also allow the operating system to reclaim the space and reduce the database size.
						
						
						
--FUNCTIONS 

localtime( [ precision ] ) / localtime( [ precision ] )
SELECT localtimestamp(3);--2014-04-24 20:18:08.587
SELECT localtime;		 --20:55:09.808294

now() /current_timestamp /current_time
select now(); 			--2023-06-05 15:54:46.568493+00
select current_time(4);	--15:55:32.116300+00:00

AGE(time1- time2)-- interval

EXTRACT(year from timestamp)/  DATE_PART('year', timestamp)

TRUNC( number, [ decimal_places ] )
SELECT trunc(125.315, 2);--125.31
SELECT trunc(125.315, -1);--120

BTRIM( string, trim_character ) / ltrim( string, trim_character ) / rtrim( string, trim_character ) / trim( [ leading | trailing | both ] [ trim_character ] from string )
SELECT btrim('123Te123ch123', '123');	--Te123ch
SELECT btrim('    XYZ    ');			--XYZ


LPAD( string, length, pad_string ) / rpad( string, length, pad_string )
SELECT LPAD('abc', 10, 'XYZ');--XYZXYZXabc
SELECT RPAD('abc', 10, 'XYZ');--abcXYZXYZX


INITCAP( string )
select INITCAP('Learn PostgreSQL with Tech on the Net!');--Learn Postgresql With Tech On The Net!


POSITION( substring in string ) / STRPOS( string, substring )
SELECT POSITION('h' in 'techonthenet.com'); --4


REPEAT( string, number )
SELECT REPEAT('a', 5);	--aaaaa


REPLACE( string, from_substring, to_substring )
SELECT REPLACE('abc abc', 'a', 'B');	--Bbc Bbc
SELECT REPLACE('monthoxyzn', 'on', 'ABC'); --mABCthoxyzn			*Whole String is replaced

TRANSLATE( string1, string_to_replace, replacement_string)
SELECT TRANSLATE('monthoxyzn', 'on', 'ABC');--mABthAxyzB			*Characarter by character is replaced


SUBSTRING( string [from start_position] [for length] ) / SUBSTRING ( string ,start_position , length )
SELECT SUBSTRING('PostgreSQL' from 1 for 8);	-- PostgreS
SELECT SUBSTRING ('PostgreSQL', 1, 8);			-- PostgreS

SUBSTRING(string FROM pattern) / SUBSTRING(string,pattern) 
SELECT SUBSTRING ('The house no. is 9001','([0-9]{1,4})');	-- 9001
select SUBSTRING('vimal.verma@gmail.com' from '^(.*)@'); 	--vimal.verma
select SUBSTRING('vimal.verma@gmail.com' from '@(.*)$'); 	--gmail.com

FORMAT('%s, %s',string1, string2)
FORMAT('%s, %s',last_name, first_name); --Singh, Omendra

MD5(string)
MD5 Hash


#########################   HINTS:
http://pghintplan.osdn.jp/pg_hint_plan.html
http://pghintplan.osdn.jp/hint_list.html





SELECT 'OMENDRA''S SON';

INSERT INTO TABLEA (COL1,COL2) VALUES (VAL1,VAL2) RETURNING *; --RETURNS AFFECTED ROWS

INSERT INTO TABLEA (COL1,COL2) VALUES (VAL1,VAL2) 
ON CONFLICT (COL2) DO UPDATE SET COL2=EXCLUDED.COL2||'.1'; --UPSERT


SELECT * FROM TABA LIMIT 5 OFFSET 4; --FETCH 5 ROWS AFTER FIRST 4
SELECT * FROM TABA OFFSET 4 FETCH FIRST 5 ROWS ONLY;

SELECT * FROM TABA WHERE COL1 ILIKE 'ABC%'; -- USE _ FOR SINGLE CHARACTER CHECK AND LIKE FOR CASE SENSITIVE MATCH

--concatination
select 'oracle'||'postgres'; --does not handle NULL.
select concat('oracle','postgres');
select concat_ws(' ','oracle','postgres');
