############################################## CTID and MVCC ############################################## 
CTID is like rowid;
(79920,37)
first digit (0) represents the page number, and the second (1) stands for the tuple number

* Updating a records will create new CTID; so its unique.
* Its used in MVCC since old values is still having CTID and is avalaiable, but not visible.
** BUT : The VACUUM FULL <TABLE_NAME> rewrites the tables, and the ctid is reset.
** The VACUUM ANALYZE <TABLE_NAME> will free up the unused CTID and will those will be assigned to new records.
https://www.enterprisedb.com/postgres-tutorials/what-equivalent-rowid-postgresql#:~:text=The%20ctid%20field%20is%20a,the%20location%20of%20the%20tuple.


### DATABASE Backup
pg_dump database_name > filename.sql

####### ADVANTAGES
1. MVCC  - used to prevent unnecessary database locking
2. Write-Ahead Logging : enhances database reliability by logging changes before any changes or updates are made to the database
3. full-text search; 
		to_tsvector():  break down a document or column values into individual words(tokens)
		to_tsquery(): 	


--SQL Injection Attack
SELECT id FROM users WHERE username='user' AND password='pass' OR 5=5';'

--SELECT with offset and fetch
select * from stg_tech_schedule_esm order by serial_number
offset 3 rows
fetch first 5 row only;

--Escape character
We can override the default escape character in PostgreSQL by providing the ESCAPE modifier as follows:
SELECT *
FROM employees
WHERE last_name LIKE 'G!%' ESCAPE '!';

--DATATYPES
NUMERIC(m,d)						Where m is the total digits and d is the number of digits after the decimal.
BOOLEAN								true/false, yes/no, 1/0, t/f, y/n
CHARACTER(10)/CHAR(10)				fixed length, blank padded.
CHARACTER VARYING(10)/VARCHAR(10)	variable length with length limit.
TEXT/VARCHAR						varaible unlimited length.

SMALLINT							2 byte
INTEGER/INT							4 byte 
BIGINT								8 byte

NUMERIC/DECIMAL	(x,y)				variable size 131K.16K
REAL								4 byte with 6 decimal precision
DOUBLE PRECISION					8 byte with 15 decimal precision

DATE								4 byte, date only (DD-MON-YYYY)
TIME WITH TIME ZONE					8 byte, time only (HH:MM:SS.pppppp)
TIME WITHOUT TIME ZONE				12 byte, time and time zone (HH:MM:SS.pppppp)
TIMESTAMP							8 byte, date and time 
TIMESTAMPTZ 						8 byte, date, time and timezone

UUID								32 digit unique value. create extension if not exists "uuid-ossp"; product_id UUID Default UUID_GENERATE_V1(),
ARRAY 								ARRAY['ABC','XYZ'], starts with 1.

--################## INDEX ##################
CREATE [UNIQUE] INDEX [CONCURRENTLY] index_name
  [ USING BTREE | HASH | GIST | SPGIST | GIN ]
  ON table_name
    (index_col1 [ASC | DESC], 
     index_col2 [ASC | DESC]);

B Tree --should be used where we want range of data or using logical operator
Hash index --should be used where equality check. 
BRIN Block Range Index -- stores min and max value of the block 
GIN Generalized Inverted Index -- for text/array search scenario, points to multiple tuple
Gist:  Generalised Search Tree 
SP GIST:   Space partitioned GIST 

pg_indexes --contains details of indexes.
pg_size_pretty(pg_index_size('table_idx')); -- size of index
pg_size_pretty(pg_indexes_size('table_idx'));
pg_size_pretty(pg_relation_size('table')); --table size
pg_size_pretty(pg_total_relation_size('table'));-- table+index


pg_stat_all_indexes -- contains index stats
pg_an -- all nodes available in postgres;

pg_stat_activity
pg_user
pg_settings
pg_class
pg_hint_plan

EXPLAIN (FORMAT JSON|TEXT|XML|YML) select * from tabA;
SHOW max_parallel_workers_per_gather; --this should be 1 to study cost.
SHOW max_parallel_maintenance_workers;-- they work in background to update the indexes
COST=
(pg_relation_size('tab|indx')/8192 in bytes)  * seq_page_cost 
+ (cpu_tuple_cost * total_records)    
+ (cpu_operator_cost * total_records)

REINDEX [VERBOSE] {TABLE|INDEX|SCHEMA|DATABASE|SYSTEM} [CONCURRENTLY] name; 
	reindex index emp_id_idx; --invalidate the index by setting indisvalid=false in pg_index;

--################## VACUUM 
VACUUM statement is used to reclaim storage by removing obsolete data or tuples

VACUUM [FULL] [FREEZE] [VERBOSE] [table_name ]; 
VACUUM [FULL] [FREEZE] [VERBOSE] ANALYZE table_name [ (col1, col2, ... col_n) ]; (Gather Stats)

FULL : full contents of the table into a new file

Each time you perform an update on a table, the original record is kept in the database. A vacuum will remove these old records (ie: tuples) and reduce the size of the PostgreSQL database.
You can only those vacuum tables in which you have VACUUM permissions.
You can not run a VACUUM command within a transaction.

VACUUM table_name; free up the space within the table and leave the space available to be used by only the table.
VACUUM FULL table_name; This would not only free up the unused space in the table, 
						but it would also allow the operating system to reclaim the space and reduce the database size.
						
						
						
########################## STRING FUNCTIONS ####################################### 
1. INITCAP( string )		
	select INITCAP('Learn PostgreSQL with Tech on the Net!');--Learn Postgresql With Tech On The Net!

2. LEFT(string,n)			First n character. Omits n character from right if -n is provided.  
	select LEFT('INDIA',2);-- IN 

3. RIGHT(string,n)			Last n character. Omits n character from left if -n is provided.
	select RIGHT('INDIA',2);-- IA 

4. SPLIT_PART(string,delimeter,n) 	split the string to array using delimeter to split and return nth value
	select split_part('ABC|XYZ|MNO','|',2); -- XYZ 

5. TRIM(LEADING|TRAILING|BOTH [char] from string)	--removes char from string. Spaces are removed by default.
	select trim(leading '0' from '000123'); --123

6. LTRIM(string,[char]); --removes char from left side of string. Spaces are removed by default.
	select ltrim('yummy','y'); --ummy

7. RTRIM(string,[char]); --removes char from right side of string, Spaces are removed by default.
	select rtrim('yummy','y'); --yumm

8. BRIM(string,[char]); --removes char from both side of string, Spaces are removed by default.
	select btrim('yummy','y'); --umm
	
9. LPAD(string, length, pad_string) --pads a string on left to meet the specified length. Spaces are padded by default.
	select lpad('1234',8,'0'); --00001234
	
10.RPAD(string, length, pad_string) --pads a string on right to meet the specified length. Spaces are padded by default.
	select rpad('1234',8,'0'); --12340000

11.POSITION( substring in string ) / STRPOS( string, substring ) --returns the starting position of matched substring.
	SELECT POSITION('h' in 'techonthenet.com'); --4

12.SUBSTRING( string [from start_position] [for length] ) / SUBSTRING ( string ,start_position , length )
	SELECT SUBSTRING('PostgreSQL' from 1 for 8);	-- PostgreS
	SELECT SUBSTRING ('PostgreSQL', 1, 8);			-- PostgreS
	select SUBSTRING('vimal.verma@gmail.com' from '^(.*)@'); 	--vimal.verma
	select SUBSTRING('vimal.verma@gmail.com' from '@(.*)$'); 	--gmail.com

13.REPEAT( string, number )
	SELECT REPEAT('a', 5);	--aaaaa

14.REPLACE( string, from_substring, to_substring )
	SELECT REPLACE('abc abc', 'a', 'B');	--Bbc Bbc
	SELECT REPLACE('monthoxyzn', 'on', 'ABC'); --mABCthoxyzn			*Whole String is replaced

15.TRANSLATE( string1, string_to_replace, replacement_string)
	SELECT TRANSLATE('monthoxyzn', 'on', 'ABC');--mABthAxyzB			*Characarter by character is replaced
	
16. TO_CHAR(expression,format)	--Converts these to string: timestamp, interval, integer, double precision

count(*)/count(any_number) 	--will give total number of rows, irrespective of null values.
count(column_name)			--will give total non null values in that column.

########################## DATE FUNCTIONS ####################################### 

SET DateStyle='ISO, DMY'; ISO|Postgres|SQL|German and DMY|YDM|MDY

1. localtime( [ precision ] ) / localtime( [ precision ] )
	SELECT localtimestamp(3);--2014-04-24 20:18:08.587
	SELECT localtime;		 --20:55:09.808294

2. now() /current_timestamp /current_time
	select now(); 			--2023-06-05 15:54:46.568493+00
	select current_time(4);	--15:55:32.116300+00:00

3. AGE(time1- time2)	-- interval
	select age(date '01-AUG-2023'); -- current_Date - 01-AUG-2023 = "3 mons 28 days"

4. MAKE_DATE(YYYY,MM,DD) 		--create dates
	select make_date(2023,11,29);

5. MAKE_TIME(HH24,MM,SS)		-- creates time without timezone
	select make_time(16,30,12);
	
6. MAKE_TIMESTAMP(YYYY,MM,DD,HH,MM,SS)	--creats timestamp without timezone
	select MAKE_TIMESTAMP(2023,11,29,16,30,12);
	
7. MAKE_TIMESTAMPTZ(YYYY,MM,DD,HH,MM,SS,[TZ]) 
	select MAKE_TIMESTAMPTZ(2023,11,29,16,30,12); --"2023-11-29 16:30:12+05:30"
	select MAKE_TIMESTAMPTZ(2023,11,29,16,30,12,'EST'); --"2023-11-30 03:00:12+05:30"

8. MAKE_INTERVAL(years,months,weeks,days, hours, minutes, seconds);
	select make_interval(weeks=>2); --14 days
	select make_interval(2020,1,2,1,10,30,45); -- 2020 years 1 months 15 days 10:30:45
	
9. EXTRACT(field from source)/DATE_PART(field,source)
	select EXTRACT(year from timestamp);/ select DATE_PART('year', timestamp);
	DOW(starts with Sunday=0), ISODOW(starts with Monday=1), DOY, EPOCH, QUARTER, CENTURY, DECADE
	
10.(DATE1,DATE2) OVERLAPS (DATE3,DATE4) -- returns true or false, border values are not checked for overlap.

11.DATE_TRUNC(timestamp,precision)  -- truncates the data to precision level.
	select date_trunc('hour', timestamp '29-NOV-2023 20:30:45');--'29-NOV-2023 20:00:00'






SELECT 'OMENDRA''S SON';

INSERT INTO TABLEA (COL1,COL2) VALUES (VAL1,VAL2) RETURNING *; --RETURNS AFFECTED ROWS

INSERT INTO TABLEA (COL1,COL2) VALUES (VAL1,VAL2) 
ON CONFLICT (COL2) DO UPDATE SET COL2=EXCLUDED.COL2||'.1'; --UPSERT


SELECT * FROM TABA LIMIT 5 OFFSET 4; --FETCH 5 ROWS AFTER FIRST 4
SELECT * FROM TABA OFFSET 4 FETCH FIRST 5 ROWS ONLY;

SELECT * FROM TABA WHERE COL1 ILIKE 'ABC%'; -- USE _ FOR SINGLE CHARACTER CHECK AND LIKE FOR CASE SENSITIVE MATCH

--concatination
select 'oracle'||'postgres'; --does not handle NULL.
select concat('oracle','postgres');
select concat_ws(' ','oracle','postgres');

-- CUSTOM DATATYPE
CREATE DOMAIN ADDR VARCHAR(100) NOT NULL; 
CREATE DOMAIN POSITIVE_NUMBER INT NOT NULL CHECK(VALUE>0);
CREATE TABA (ADDRESS ADDR, MARKS POSITIVE_NUMBER);

--COMPOSITE CUSTOM DATATYPE
CREATE TYPE addr as (city VARCHAR(50),country varchar(50));
create type gender as enum ('Male','Female');
create taba(address addr, orientation gender);
insert into taba(address, orientation) values(row('Delhi','India'),'Male');
select (address).city,orientation from taba;

--SEQUENCE 
CREATE SEQUENCE IF NOT EXISTS SEQ AS SMALLINT
START 50 INCREMENT -1 MINVALUE 10 MAXVALUE 200 CYCLE; 


--PG_DUMP 
>pg_dump -d schema_name -h localhost -U local_user -n public > dump.sql
>psql -h localhost -U local_user -d schema_name -f dump.sql
