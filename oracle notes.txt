###########################################################################################################################
--EXCEPTION
1. Internally defined exceptions, which arise from the Oracle Database environment ORA-27102 (out of memory)
2. Predefined exceptions are errors which occur during the execution of the program.ZERO_DIVIDE, NO_DATA_FOUND, TOO_MANY_ROWS, INVALID_CURSOR,INVALID_NUMBER 	
3. User-defined exceptions are custom exception defined by users like you. User-defined exceptions must be raised explicitly.

The following table illustrates the differences between exception categories.

	Category			Definer			Has Error Code			Has Name				Raised Implicitly	Raised Explicitly
	--------------------------------------------------------------------------------------------------------------------------
	Internally defined	Runtime system	Always					Only if you assign one	Yes					Optionally
	Predefined			Runtime system	Always					Always					Yes					Optionally
	User-defined		User			Only if you assign one	Always					No					Always

declare
    invalid_age exception; --user defined exception
    pragma exception_init(invalid_age,-20100); -- this generates error code for UDI.-20,999 to -20,000
    age number := 10;
begin
    if age< 18 then
       --raise invalid_age;
       raise_application_error(-20100,'Under Age hai'); -- for user defined message
    end if;
exception
    when invalid_Age then    
    dbms_output.put_line(SQLERRM);    
    dbms_output.put_line(SQLCODE);   
	RAISE; -- reraise exception 
end ;


###########################################################################################################################
--PROCEDURE 
returning result set from procedure

c_customers SYS_REFCURSOR;
dbms_sql.return_result(c_customers);

###########################################################################################################################

--FUNCTIONS
We can not place any DML statement inside a function simply. 
--This can be achieved by : PRAGMA autonomous_transaction;
AND
A function with a DML statement cannot be used inside a SELECT query.
--This can be achieved by calling the function in an anonymous block

https://www.oracleappsdna.com/2013/06/how-to-use-dml-statements-in-a-function/ 

--OVERLOADING EXAMPLE
TO_CHAR(1210.73, '$9,999.00')
Result: ' $1,210.73' -- number to varchar

TO_CHAR(sysdate, 'MON DDth, YYYY')
Result: 'JUL 09TH, 2003' -- date to varchar

###########################################################################################################################
--RECORDS
1. table-based, 
		record_name table_name%ROWTYPE;
2. cursor-based
		record_name cursor_name%ROWTYPE;
3. programmer-defined (can be nested)
		TYPE record_type IS RECORD (
			field_name1 data_type1 [[NOT NULL] := | DEFAULT default_value],
			field_name2 data_type2 [[NOT NULL] := | DEFAULT default_value],
			...
		);
		record_name record_type;

--COLLECTIONS
1. NESTED ARRAY --single-dimensional, unbounded, (initially dense, can be sparse) collections of homogeneous elements.
		TYPE nested_type IS TABLE OF VARCHAR2(30);
		v1 := nested_type('Salary','Sales','Budget','Payroll');
2. VARRAY --single-dimensional, bounded, dense collections of homogeneous elements
		TYPE varray_type IS VARRAY(5) OF INTEGER;
		v2 := varray_type(1, 2, 3, 4, 5);
3. ASSOCIATIVE ARRAY --single-dimensional, unbounded, sparse collections of homogeneous elements		
		TYPE assoc_array_num_type IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
		v3(99) := 120;
		TYPE assoc_array_str_type IS TABLE OF VARCHAR2(32) INDEX BY PLS_INTEGER;
		v4(42) := 'Sam';
		TYPE assoc_array_str_type2 IS TABLE OF VARCHAR2(32) INDEX BY VARCHAR2(64);
		v5('Greece') := 'calfornia';

		FIRST, LAST, COUNT, NEXT, PRIOR, EXTEND,TRIM
###########################################################################################################################

--CURSOR (pointer that points to a result of a query)
1. Implicit cursors : automatically created by oracle when DML is done.
		* SQL%ROWCOUNT, SQL%ISOPEN, SQL%FOUND, and SQL%NOTFOUND
2. Explicit cursors : SELECT statement declared explicitly in the declaration section of the current block or a package specification.
		* we have to control over its execution cycle from OPEN, FETCH, and CLOSE
		* cursor_name%ROWCOUNT, cursor_name%ISOPEN, cursor_name%FOUND, and cursor_name%NOTFOUND

--LIFE CYCLE 
DECLARE
  CURSOR summary (fromDate date := '01-JAN-2022')
  IS
    SELECT summary_date,uuid FROM gps_daily_summary
    where 
        summary_date >= fromDate and uuid='KS8419';
		
   type summary_type is record(
        summary_date    gps_daily_summary.summary_date%TYPE,
        uuid            gps_daily_summary.uuid%TYPE
   );
   summary_record summary_type;     
BEGIN
  OPEN summary; --OPEN 
  LOOP
    fetch summary into summary_record; --FETCH
    exit when summary%NOTFOUND; --CHECK IF EMPTY
    dbms_output.put_line( summary_record.summary_Date || '    ' ||  summary_record.uuid);    
  END LOOP;
  close summary; --CLOSE
END;


--WHEN YOU DONT WANT TO MANAGE LIFE CYCLE then use CURSOR FOR LOOP
DECLARE
  CURSOR summary (fromDate date default '01-JAN-2022')
  IS
    SELECT 
        summary_date,uuid
    FROM 
        gps_daily_summary
    where 
        summary_date >= fromDate
        and uuid='KS8419'
    ORDER BY 
        summary_date;
BEGIN
  FOR rec IN summary('01-DEC-2022') --CURSOR FOR LOOP (no need to manage cursor cycle)
  LOOP
    dbms_output.put_line( rec.summary_Date || '    ' ||  rec.uuid);
  END LOOP;
END;


--TYPES OF REF CURSOR 
DECLARE
    TYPE customer_t IS REF CURSOR RETURN customers%ROWTYPE;	-- STRONG REF CURSOR(cursor variable is always associated with a specific record structure, or type.)
	c_customer customer_t;
		OR	
    TYPE customer_t IS REF CURSOR; 							-- WEAK REF CURSOR (declaration that is not associated with any specific structure:)
	c_customer customer_t;
		OR
	c_customer SYS_REFCURSOR;								-- WEAK REF CURSOR (PREDEFINED by ORACLE)


-- ref cursor example
DECLARE
  type summary_type is record(
    summary_date    gps_daily_summary.summary_date%TYPE,
        uuid            gps_daily_summary.uuid%TYPE
  );
   summary_record summary_type;
   
    type ref_cur is ref cursor return summary_type;
    ref_cur_summary ref_cur;
BEGIN
  OPEN ref_cur_summary for 
  SELECT 
        summary_date,uuid
    FROM 
        gps_daily_summary
    where 
        summary_date >= '01-DEC-2022'
        and uuid='KS8419'
    ORDER BY 
        summary_date;
  LOOP
    fetch ref_cur_summary into summary_record;
    exit when ref_cur_summary%NOTFOUND;
    dbms_output.put_line( summary_record.summary_Date || '    ' ||  summary_record.uuid);    
  END LOOP;
  close ref_cur_summary;
END;

--CURSOR FOR UPDATE 
if we want to lock a set of rows before you can update them in your program.
CURSOR cursor_name IS
    SELECT select_clause
    FROM from_clause
    WHERE where_clause
    FOR UPDATE;
	--FOR UPDATE OF column_name;

###########################################################################################################################
--TRIGGER
CREATE OR REPLACE TRIGGER customers_audit_trg
    AFTER 
    UPDATE OR DELETE OR INSERT
    ON customers
    FOR EACH ROW

--MUTATING TABLE ERROR
First, you update data to a table.
Second, a row-level trigger associated with the table automatically fires and makes another change to the table.
--HOW TO FIX : "COMPOUND TRIGGER"
First, collect affected rows into the array in the row-level trigger.
Second, update each affected row in the statement-level trigger. 

CREATE OR REPLACE TRIGGER customers_credit_limit_trg
    FOR INSERT OR UPDATE
    ON customers
    COMPOUND TRIGGER
    v_cust_id        NUMBER;
    v_credit_limit   NUMBER;
    
    AFTER EACH ROW
    IS
    BEGIN
        v_credit_limit := :NEW.credit_limit;
        v_cust_id := :NEW.CUSTOMER_ID;
        DBMS_OUTPUT.PUT_LINE('VALUE v_credit_limit: '||v_credit_limit);
        DBMS_OUTPUT.PUT_LINE('VALUE v_cust_id: '||v_cust_id);
    END AFTER EACH ROW;

    AFTER STATEMENT
    IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE('STATEMENT TRIGGER');
        IF v_credit_limit < 1000
        THEN
            UPDATE customers
               SET credit_limit = 1000
             WHERE customer_id = v_cust_id;
        END IF;
    END AFTER STATEMENT;
END;

--INSTEAD OF trigger on views
CREATE OR REPLACE TRIGGER new_customer_trg
    INSTEAD OF INSERT ON vw_customers
    FOR EACH ROW
DECLARE
    l_customer_id NUMBER;
BEGIN
    -- insert a new customer first
    INSERT INTO customers(name, address, website, credit_limit)
    VALUES(:NEW.NAME, :NEW.address, :NEW.website, :NEW.credit_limit)
    RETURNING customer_id INTO l_customer_id;
    
    -- insert the contact
    INSERT INTO contacts(first_name, last_name, email, phone, customer_id)
    VALUES(:NEW.first_name, :NEW.last_name, :NEW.email, :NEW.phone, l_customer_id);
END;

###########################################################################################################################

--OPTIMIZING

Use of Proper Indexing Techniques
	B-Tree (Balanced Tree) Index (default)
	Bit-map index 
	Create indexes on group by and order by columns 
	Avoid indexing on small tables
	Create Composite indexes 
	Response Time(first record) and Total Execution time(all records)
	
1.Use column names in the Query in-spite of using * operator to select all records

2.Avoid use of Distinct clause in query as it increases the sorts.

3.Avoid Use of not equal to in where clause in-spite of that use greater than and less than operator

4.Avoid Having clause or group by clause if possible.

5.Avoid use of Union statement in the query in-spite of that try to use union all statement.

6. Avoid inner queries and use joins instead.

7. use table partitioning



###########################################################################################################################
--PARTITIONS

• Range Partition
	CREATE table sale_product (year number(4),product_name varchar2(10), amount number(10))
	partition by range (year)
	(partition p1 values less than(2002),
	partition p2 values less than(2003),
	partition p3 values less than(2004),
	partition p4 values less than(maxvalue));

• Hash Partition (hash value of the partition key)
	CREATE TABLE product(product_id NUMBER(4), description VARCHAR2 (100))
	PARTITION BY HASH (product_id)
	PARTITIONS 4
	STORE IN (p1, p2, p3, p4);
• List Partition
	CREATE table employee_database (employee_id number (5), employee_name varchar2(20),City varchar2(20))
	Partition by list (City)
	(Partition p1 values ('NEWDELHI','LUCKNOW'),
	Partition p2 values ('ASANSOL','JAMSHEDPUR'),
	Partition P3 values ('MUMBAI', 'GOA'),
	Partition p4 values ('LONDON','CHICAGO'));
• Composite Partition
	CREATE TABLE PRODUCT_LIST (product_id NUMBER, description VARCHAR (100), costprice NUMBER(5))
	PARTITION BY RANGE (costprice)
	SUBPARTITION BY HASH(description)
	SUBPARTITIONS 4 STORE IN (tab1, tab2, tab3, tab4)
	(PARTITION p1 VALUES LESS THAN (2000),
	PARTITION p2 VALUES LESS THAN (4000),
	PARTITION p3 VALUES LESS THAN (MAXVALUE));

###########################################################################################################################
--COST ANALYSIS

EXPLAIN PLAN FOR 
SELECT 
    * FROM   members
WHERE
    gender = 'F';
    
SELECT 
    PLAN_TABLE_OUTPUT 
FROM 
    TABLE(DBMS_XPLAN.DISPLAY());      
###########################################################################################################################

--MV REFRESH
* The in-place refresh executes the refresh statements directly on the materialized view.
* The out-of-place refresh creates one or more outside tables and executes the refresh statements on the outside tables 
	and then switches the materialized view with the outside tables.

CREATE MATERIALIZED VIEW view-name
BUILD [IMMEDIATE | DEFERRED]
REFRESH [FAST | COMPLETE | FORCE ]
ON [COMMIT | DEMAND ]
[[ENABLE | DISABLE] QUERY REWRITE]
AS
SELECT ...;


1. when changes to the underlying objects are committed, 
2. on demand, (default ): DBMS_MVIEW.REFRESH('mv_name','f')
3. at specified time intervals,
4. never refresh.
###########################################################################################################################

--GOTO 
BEGIN
  GOTO second_message;
  <<first_message>>
  DBMS_OUTPUT.PUT_LINE( 'Hello' );
  GOTO the_end;
  <<second_message>>
  DBMS_OUTPUT.PUT_LINE( 'PL/SQL GOTO Demo' );
  GOTO first_message;
  <<the_end>>
  DBMS_OUTPUT.PUT_LINE( 'and good bye...' );
END;

--creat table with constaints
create table department(
department_id varchar2(5) primary key ,
department_name varchar2(10) unique check(REGEXP_LIKE(department_name,'^[a-zA-Z]$')),
department_head varchar2(20)
);

create table employee(
employee_id varchar2(5) constraint employee_pk primary key,
employee_name varchar2(10),
department_id varchar2(5) REFERENCES  departments(department_id) 
--department_id references departments(department_id) 
--constraint emp_dep_fk foreign key(department) references departments(department_id) 
ON DELETE [ CASCADE | SET NULL ] -- delete|set null, record in this table if parent record is deleted.
);


loop 
DBMS_SCHEDULER.CREATE_JOB (job_name       => v_mgr_loop || v_loop_idx,
                                    program_name   => v_program_name,
                                    start_date     => SYSTIMESTAMP);

DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE (
            job_name            => v_mgr_loop || v_loop_idx,
            argument_position   => 1,
            argument_value      => v_loop_idx);
DBMS_SCHEDULER.SET_JOB_ARGUMENT_VALUE (
            job_name            => v_mgr_loop || v_loop_idx,
            argument_position   => 2,
            argument_value      => n_in_lvl_nbr);

DBMS_SCHEDULER.ENABLE (name => v_mgr_loop || v_loop_idx);         

--MERGE

MERGE INTO target_table 
USING source_table 
ON search_condition
    WHEN MATCHED THEN
        UPDATE SET col1 = value1, col2 = value2,...
        WHERE <update_condition>
        [DELETE WHERE <delete_condition>]
    WHEN NOT MATCHED THEN
        INSERT (col1,col2,...)
        values(value1,value2,...)
        WHERE <insert_condition>;
	
--TRANSLATE vs REPLACE	
1. TRANSLATE (‘ABCED’,’AC’,’ac’)
Result: aBcED
Note: Here it changes character by character. If no replacement for a character then it will be replaced to Blank.

2. REPLACE (‘ABCED’,’AB’,’acvv’)
Result: acvvCED
Note: Here it changes one pattern by another.

--USING
USING clause specifies which columns to test for equality when two tables are joined.

--ROWNUM and ROWID
ROWID uniquely identifies where a row resides on disk.  
The information in a ROWID gives Oracle everything he needs to find your row, the disk number, the cylinder, block and offset into the block. 
eg. AAxJasAB5AAABSDAAA,AAxJasAB5AAABSDAAB

ROWNUM is a "pseudo-column", a placeholder that you can reference.
eg. 1,2,3


--count(1),count(*),count(col_name)
count(*) : 			number of rows in the table, counting nulls as well.
count(1) : 			same as count(*); any number wont matter   count(1)=count(-13)
count(col_name):	number of non null values in that column;

--GLOBAL TEMP TABLE
* data inserted by a session can only be accessed by that session.
CREATE GLOBAL TEMPORARY TABLE my_temp_table (
  id           NUMBER,
  description  VARCHAR2(20)
)
ON COMMIT DELETE ROWS; -- data should be deleted at the end of the transaction, or the end of the session  
ON COMMIT PRESERVE ROWS;--rows should persist beyond the end of the transaction. They will only be removed at the end of the session

--CASE vs DECODE
	1. case is statement and decode is a function.
	2. decode checks for equality and case works with all logical operators. (<,>,=, between, like)
	3. We can use a subquery in case. not in decode.

--HIERARCHICAL QUERY

SELECT id, parent_id, 
    LEVEL, --The position in the hierarchy of the current row in relation to the root node.
    connect_by_root id as root_id, --Returns the root node(s) associated with the current row.
    SYS_CONNECT_BY_PATH(id, '->') as path,--Returns a delimited breadcrumb from root to the current row.
    connect_by_Isleaf as IS_LEAF,-- Indicates if the current row is a leaf node.
    connect_by_iscycle as IS_CYCLE --indicates which record is responsible for the cycle.
FROM tab1
       START WITH parent_id is null
       CONNECT BY 
       NOCYCLE --used with connect_by_iscycle 
       PRIOR id = parent_id
ORDER SIBLINGS BY id;

To traverse bottom up, we need to change start with (leaf) and connect by id=prior parent_id

--postgres
with recursive cte_query as (
	select
		empno,	ename,	job,	mgr 
	from	emp
	where
		empno = 7876
	union all
	select
		e.empno,	e.ename,	e.job,	e.mgr
	from emp e
	inner join cte_query c on c.mgr = e.empno 
)select	* from	cte_query;


--EXECUTE IMIDIATE
EXECUTE IMMEDIATE 'CREATE TABLE bonus (id NUMBER, amt NUMBER)';

sql_stmt := 'INSERT INTO dept VALUES (:1, :2, :3)';
EXECUTE IMMEDIATE sql_stmt USING dept_id, dept_name, location;

sql_stmt := 'SELECT * FROM emp WHERE empno = :id';
EXECUTE IMMEDIATE sql_stmt INTO emp_rec USING emp_id;

plsql_block := 'BEGIN emp_pkg.raise_salary(:id, :amt); END;';
EXECUTE IMMEDIATE plsql_block USING 7788, 500;

sql_stmt := 'UPDATE emp SET sal = 2000 WHERE empno = :1 RETURNING sal INTO :2';
EXECUTE IMMEDIATE sql_stmt USING emp_id RETURNING INTO salary;

EXECUTE IMMEDIATE 'DELETE FROM dept WHERE deptno = :num' USING dept_id;

EXECUTE IMMEDIATE 'ALTER SESSION SET SQL_TRACE TRUE';


--DIRECTORY
CREATE OR REPLACE DIRECTORY bfile_dir AS '/private1/LOB/files';



--Points to remember

1. select * from dual; 1 column : dummy of varchar2 with one value 'X'

2. order by column_1 [ASC | DESC] [NULLS FIRST | NULLS LAST]

3. OFFSET 2 ROWS FETCH FIRST 3 ROWS ONLY|WITH TIES; will skip 2 rows and fetch next 3 rows.

4. LIKE '%25!%%' ESCAPE '!' ; 

5. GENERATED [ALWAYS | BY DEFAULT[ ON NULL ]] AS IDENTITY [ ( identity_options ) ] 
	--ALWAYS 		will be inserted only by oracle,
	--BY DEFAULT 	will be inserted by user else oracle will insert.  (error if user give null)
	--BY DEFAULT ON NULL	 will be inserted by user else oracle will insert (oracle will insert if null is given by user)

6. group by rollup(column_1,..)|cube(column_1,..) --Used for finding subtotal and grand total based on columns
	--ROLLUP will find total based on a single column
	--CUBE will find total based on a multiple column
	
7. virtual column adding
	--ALTER TABLE Products ADD (TotalValue INT GENERATED ALWAYS AS (Qty * Price) VIRTUAL);
	
8. NVL(ex1,ex2) --ex1 is returned if itsnot null else ex2
	NVL2(ex1,ex2,ex3) -- if ex1 is null then ex3 else ex2
	DECODE(GENDER_COL,'M','MALE','F','FEMALE','NOT DISCLOSED') as GENDER
	COALESCE(ex1,ex2,ex3..) -- takes multiple values and returns first non null.
	NULLIF(ex1,ex2) --returns NULL if ex1=ex2 else ex1
	EMPTY_BLOB/EMPTY_CLOB() function returns an empty LOB locator
	BFILENAME( 'directory', 'filename' ) returns a BFILE locator.
	CARDINALITY( nested_table_column ) returns the number of elements in a nested table.
	
9. Use “&&” if you want to reuse the variable value without prompting the user each time.
	For ex: Select empno, ename, &&column_name from employee order by &column_name;

10. CHAR pads blank spaces to a maximum length, whereas VARCHAR2 does not pad blank spaces.

	
--STRING FUNCTION
1. ASCII('A')	:65	Returns an ASCII code value of a character.
2. CHR('65')	:'A'	Converts a numeric value to its corresponding ASCII character.
3. CONCAT('A','BC')	:'ABC'	Concatenate two strings and return the combined string.
4. CONVERT( 'Ä Ê Í', 'US7ASCII', 'WE8ISO8859P1' )	:'A E I'	Convert a character string from one character set to another.
5. DUMP('A')	:Typ=96 Len=1: 65	Return a string value (VARCHAR2) that includes the datatype code, length measured in bytes, and internal representation of a specified expression.
6. INITCAP('hi  there')	:'Hi There'	Converts the first character in each word in a specified string to uppercase and the rest to lowercase.
7. INSTR( 'This is a playlist', 'is')	:3	Search for a substring and return the location of the substring in a string INSTR( string, substring [, start_position [, th_appearance ] ] ) 	
8. LENGTH('ABC')	:3	Return the number of characters (or length) of a specified string
9. LOWER('Abc')	:'abc'	Return a string with all characters converted to lowercase.
10. LPAD('ABC',5,'*')	:'**ABC'	Return a string that is left-padded with the specified characters to a certain length.
11. LTRIM(' ABC ')	:'ABC  '	Remove spaces or other specified characters in a set from the left end of a string.
12. REGEXP_COUNT('1 2 3 abc','\d')	:3	Return the number of times a pattern occurs in a string.
13. REGEXP_INSTR( 'Y2K problem','\d+')	:2	Return the position of a pattern in a string.
14. REGEXP_LIKE( 'Year of 2017','\d+' )	:true	Match a string based on a regular expression pattern.
15. REGEXP_REPLACE( 'Year of 2017','\d+', 'Dragon' )	:'Year of Dragon'	Replace substring in a string by a new substring using a regular expression.
16. REGEXP_SUBSTR( 'Number 10', '\d+' )	:10	Extract substrings from a string using a pattern of a regular expression.
17. REPLACE('JACK AND JOND','J','BL')	:'BLACK AND BLOND'	Replace all occurrences of a substring by another substring in a string.
18. RPAD('ABC',5,'*')	:'ABC**'	Return a string that is right-padded with the specified characters to a certain length.
19. RTRIM(' ABC ')	:' ABC'	Remove all spaces or specified character in a set from the right end of a string.
20. SOUNDEX('sea')	:'S000'	Return a phonetic representation of a specified string.
21. SUBSTR('Oracle Substring', 1, 6 )	:'Oracle'	Extract a substring from a string.
22. TRANSLATE('12345', '143', 'bx')	:'b2x5'	Replace all occurrences of characters by other characters in a string.
23. TRIM(' ABC ')	:'ABC'	Remove the space character or other specified characters either from the start or end of a string.
24. UPPER('Abc')	:'ABC'	Convert all characters in a specified string to uppercase.

--DATE FUNCTION
1. ADD_MONTHS( DATE '2016-02-29', 1 )	:31-MAR-16	Add a number of months (n) to a date and return the same day which is n of months away.
2. CURRENT_DATE			:06-AUG-2017 19:43:44	Return the current date and time in the session time zone
3. SYSDATE				:01-AUG-17	Return the current system date and time of the operating system where the Oracle Database resides.
4. CURRENT_TIMESTAMP	:06-AUG-17 08.26.52.742000000 PM -07:00	Return the current date and time with time zone in the session time zone
5. SYSTIMESTAMP			:01-AUG-17 01.33.57.929000000 PM -07:00	Return the system date and time that includes fractional seconds and time zone.
6. LOCALTIMESTAMP		:06-AUG-17 08.26.52.742000000 PM	Return a TIMESTAMP value that represents the current date and time in the session time zone.
7. DBTIMEZONE			:-07:00	Get the current database time zone
8. SESSIONTIMEZONE		:-07:00	Get the session time zone
9. EXTRACT(YEAR FROM SYSDATE)	:2017	Extract a value of a date time field e.g., YEAR, MONTH, DAY, … from a date time value.
10. FROM_TZ(TIMESTAMP '2017-08-08 08:09:10', '-09:00')	:08-AUG-17 08.09.10.000000000 AM -07:00	Convert a timestamp and a time zone to a TIMESTAMP WITH TIME ZONE value. LAST_DAY(DATE '2016-02-01')	:29-FEB-16	Gets the last day of the month of a specified date. 
11. NEXT_DAY( DATE '2000-01-01', 'SUNDAY' )	:02-JAN-00	Get the first weekday that is later than a specified date.
12. TO_DATE( '01 Jan 2017', 'DD MON YYYY' )	:01-JAN-17	Convert a date which is in the character string to a DATE value.
13. MONTHS_BETWEEN( DATE '2017-07-01', DATE '2017-01-01' )	:6	Return the number of months between two dates. 
14. NEW_TIME( TO_DATE( '08-07-2017 01:30:45', 'MM-DD-YYYY HH24:MI:SS' ), 'AST', 'PST' )	:06-AUG-2017 21:30:45	Convert a date in one time zone to another
15. TZ_OFFSET( 'Europe/London' )	:+01:00	Get time zone offset of a time zone name from UTC
16. TO_CHAR( DATE'2017-01-01', 'DL' )	:Sunday, January 01, 2017	Convert a DATE or an INTERVAL value to a character string in a specified format.
17. ROUND(DATE '2017-07-16', 'MM')	:01-AUG-17	Return a date rounded to a specific unit of measure.
18. TRUNC(DATE '2017-07-16', 'MM')	:01-JUL-17	Return a date truncated to a specific unit of measure. 

--ANALYTICAL FUNCTION 
1. CUME_DIST	Calculate the cumulative distribution of a value in a set of values
2. DENSE_RANK	Calculate the rank of a row in an ordered set of rows with no gaps in rank values.
3. RANK			Calculate the rank of a value in a set of values.
4. LAG			Provide access to a row at a given physical offset that comes before the current row without using a self-join.
5. LEAD			Provide access to a row at a given physical offset that follows the current row without using a self-join.
6. FIRST_VALUE	Get the value of the first row in a specified window frame.
7. LAST_VALUE	Get the value of the last row in a specified window frame.
8. NTILE		Divide an ordered set of rows into a number of buckets and assign an appropriate bucket number to each row.
9. PERCENT_RANK	Calculate the percent rank of a value in a set of values.
10. NTH_VALUE	Get the Nth value in a set of values.
11. ROW_NUMBER	Assign a unique sequential integer starting from 1 to each row in a partition or in the whole result
12. LISTAGG		returns a string value as delemeted column value 	(max 200 bytes)

RANK() OVER(PARTITION BY category_id
	ORDER BY list_price DESC) price_rank

LISTAGG (last_name, ',' ON OVERFLOW TRUNCATE) 
	WITHIN GROUP (ORDER BY department)	as "Emp_List"
LISTAGG(last_name, '; ') 
	WITHIN GROUP (ORDER BY hire_date, last_name)
    OVER (PARTITION BY department_id) as "Emp_list"
	
--19c/12c features
1  column multiple index 
2. APPROX_COUNT_DISTINCT() is similar to count distinct
3. DISTINCT Option for LISTAGG Aggregate
4. immutable table and blockchain table

###################### HINTS ######################
There are 2 main approach to optimize:
	A. Rule Based Optimization (discontinued after 10g as it limited to handle complex queries) 
	B. Cost Based Optimization

1. Hints for Optimization Approaches and Goals
	/*+ ALL_ROWS */ 		--explicitly chooses the cost-based approach to optimize
	/*+ FIRST_ROWS(10) */ 	--fetch first 10 rows as quickly as possible 
	/*+ CHOOSE */ 			--optimizer to choose between the rule-based and cost-based approaches
	/*+ RULE */ 			--explicitly chooses the rule-based approach to optimize
	
2. Hints for Access Paths
	/*+ FULL(e) */			--explicitly chooses a full table scan
	/*+ ROWID(employees)*/	--explicitly chooses a table scan by rowid
	/*+ CLUSTER */			--explicitly chooses a cluster scan to access the specified table
	/*+ HASH */				--explicitly chooses a hash scan to access the specified table
	/*+ INDEX(idx) */		--explicitly chooses an index scan for the specified table

3. Hints for Query Transformations
	/*+USE_CONCAT*/			--forces combined OR conditions in the WHERE clause of a query to be transformed into a compound query using the UNION ALL set operator.
	/*+MERGE(v)*/ 			--lets you merge a view for each inner query.
	
4. Hints for Join Orders
	/*+ORDERED */			--causes Oracle to join tables in the order in which they appear in the FROM clause
	
5. Hints for Join Operations
	/*+ USE_NL(l h) */		--use nested loops join, used for small table. Fetches first rows fast.
	/*+ USE_MERGE(l,h) */	--use sort merge join, the data must be sorted
	/*+ USE_HASH(l h) */	--use hash join, hash table is created and matched.

6. Hints for Parallel Execution
	/*+ PARALLEL(hr_emp, 5) */ --specify the desired number of concurrent servers that can be used for a parallel operation. 

##################### BULK ##################### 

CREATE OR REPLACE PROCEDURE update_credit (p_sex              IN customers.sex%TYPE,
                                           p_percent_change   IN NUMBER)
AS
    CURSOR customer_cur
    IS
        SELECT customer_id
          FROM customers
         WHERE sex = p_sex;

    TYPE cust_id_table_type IS TABLE OF customers.customer_id%TYPE;
    cust_id_table   cust_id_table_type;
BEGIN
    DBMS_OUTPUT.put_line ('Inside procedure');
    OPEN customer_cur;
    LOOP
        FETCH customer_cur BULK COLLECT INTO cust_id_table LIMIT 100;
        --FORALL indx IN 1 .. cust_id_table.COUNT SAVE EXCEPTIONS 
		FORALL indx IN INDICES OF cust_id_table SAVE EXCEPTIONS --used with sparse collections
            UPDATE customers
               SET credit_limit = credit_limit + credit_limit * (p_percent_change / 100)
             WHERE customer_id = cust_id_table (indx);
        EXIT WHEN cust_id_table.COUNT = 0;
    END LOOP;
    CLOSE customer_cur;
EXCEPTION
    WHEN OTHERS
    THEN
		IF SQLCODE = -24381
		THEN
			DBMS_OUTPUT.put_line ('Error ' || SQLCODE || SQLERRM);
			FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
			LOOP
				DBMS_OUTPUT.put_line (
                  SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
				|| ': '
				|| SQL%BULK_EXCEPTIONS (indx).ERROR_CODE);
			END LOOP;
		else 
			raise;
		end if;	
END update_credit;

############################ LOCKING ############################

LOCK TABLE tables IN lock_mode MODE [ WAIT [, integer] | NOWAIT ];

SHARE				Allows concurrent queries but users are prevented from updating the locked table.
EXCLUSIVE			Allows queries on the locked table, but no other activities.

ROW SHARE/SHARE UPDATE			Allows concurrent access to the table, but users are prevented from locking the entire table for exclusive access.

ROW EXCLUSIVE		Allows concurrent access to the table, but users are prevented from locking the entire table with exclusive access and locking the table in share mode.
SHARE ROW EXCLUSIVE	Users can view records in table, but are prevented from updating the table or from locking the table in SHARE mode.
